FORMAT: 1A
HOST: https://dev-01.spinoco.com/

# Spinoco Application Interface

## Authentication

Spinoco authentication is based on SRP6a protocol and allows secure authentication of users to Spinoco.
The basics of authentication are based on acquiring SRP6a authentication token, and then using that token 
for any subsequent requests towards Spinoco. Token has limited lifetime, and when lifetime of token expires, 
the server responds with `412 Precondition failed` response.

There are two available methods for acquiring SRP6a code: 
 
 - Plain text method 
 - SRP6a method
 
### Plain Text Authentication 

For developers that do not have experience with SRP6a authentication or don't want to bother implementing two phase 
authentication protocol, plain text method can be used. This plain text method runs over secured (https://) connection
and allows by sending username and password to obtain fresh SRP6a token, that can be used later for authenticating 
individual requests. 
 

### SRP6a Authentication

SRP6a authentication follows specification described here: [http://srp.stanford.edu/design.html]. 
This method is two phase mechanism, where in first step intermediate values are computed and then 
these values are used to obtain final SRP6a authentication token. 

Detailed javascript implementation on how SRP6a can be used may be found with javascript 
source code here: [https://bitbucket.org/simon_massey/thinbus-srp-js].

Spinoco uses SHA-256 Hash function and following parameteres: 

```javascript
var SRP6CryptoParams= {
    N_base10: "448616383187165606651397957351930126088959498417676897069668099929146593133050791056986041677935700368943974214658691029107468455415273970882109774247135498147915287122728852069975864268235759217199788431041451477092639227095981654351333417492353210595652288720549813844192730489571439345577216025985178039675579730305754734022526822185859548503530557959207512412633499051392938758716075863712443209048239916212231617118226047298314209402496598826021084630927234351872299676843649774085599799977855576878895229392716612630885512894472432885027870635373635240671589195395903474869071154351550631506416922905672517",
    g_base10: "2",
    k_base16: "bd3aecf291f7b79355111ef96b385fb4ecdfb82f8e5eb44a3257c6e4bed67d79"
}

```

### Using SRP6a token 

SRP6a token is passed with Each HTTP Request in `Authorization` Header like in following example: 

```
Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c

```

If client cannot supply Authorization header to request, then it may supply token as parameter to request. 
This is used for example for websocket communitation. Example of such technique is here: 

```
GET /user/wss?a=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c
```


### Impersonation 

Certain API calls allows one account to impersonate for the other. These are calls that require 
special privilegies to be assigned to user that is willing to perfrom requests on behalf of other users. Such requests are 
required to contain further parameter in authentication to indicate user on which behalf API user 
is making the request. 

For requests authenticated by `Authorize` header, user is passed as authentication property like in this example: 


```
Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c,userName=marry.doe@domain.com

```

Similarly for authentication passed as query paramater user is passed as userName parameter: 

```
GET /user/wss?a=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c&userName=marry.doe@domain.com
```

## Address Book

Spinoco organizes contacts in AddressBook. Each AddressBook is identified by its unique Id. Each contact belongs exactly 
to one AddressBook. 

Each Contact is identified by its `contactId`, and may have mulitple attributes. Contacts may be any of three types : 

- Person (physical person)
- Group (may contain none or many persons, i.e. company)
- Anonymous (contact that is neither person nor group)


Three operations are currently supported on AddressBook 

- Create New Contact
- Update Current Contact
- Get Contact

Each of these requests requires user to authenticate. 

Common workflow of Contact Creation is :

1. Create Contact
2. Send any updates to contact

### Update Contact 

Contact Update Api was designed to minimize chances of conflict. 
To update contact you need to know current value of the property (i.e. address) and new value of that property. 

Following table lists messages available to update contact and their behaviour when current or update parameter is specified: 

Attribute   | Message                  | Action      | current | update 
------------|--------------------------|-------------|--------|---------|--------
Type        | ContactTypeUpdate        | succeeds if current value matches `current` attribute | required | required
Type        | ContactTypeUpdate        | overrides content of `Type` attribute | not present | required
Phone       | ContactPhoneNumberUpdate | Adds new phone | not present | required
Phone       | ContactPhoneNumberUpdate | Modifies current phone specified by `current` | required | required
Phone       | ContactPhoneNumberUpdate | Removes current phone specified by `current` | required | not present
Email       | ContactEmailUpdate       | Adds new email | not present | required
Email       | ContactEmailUpdate       | Modifies current email specified by `current` | required | required
Email       | ContactEmailUpdate       | Removes current email specified by `current` | required | not present
Address     | ContactAddressUpdate     | succeeds if current value matches `current` attribute | required | required
Address     | ContactAddressUpdate     | overrides content of `Adress` attribute | not present | required
Parents     | ContactParentUpdate      | succeeds if current value matches `current` attribute | required | required
Parents     | ContactParentUpdate      | overrides content of `Parents` attribute | not present | required
Skills      | ContactSkillUpdate       | succeeds if current value matches `current` attribute | required | required
Skills      | ContactSkillUpdate       | overrides content of `Skills` attribute | not present | required
Extermal Id | ContactExternalIdUpdate  | succeeds if current value matches `current` attribute | required | required
Extermal Id | ContactExternalIdUpdate  | overrides content of `ExternalId` attribute | not present | required
Hashtag     | ContactHashTagUpdate     | Adds new hashtag | not present | required
Hashtag     | ContactHashTagUpdate     | Removes current hashtag | required | not-present
Hashtag     | ContactHashTagUpdate     | Modifies current hashtag | required| required


## Call Control and Monitoring

Spinoco allows placing and receiveing phone calls to/from PSTN and between Spinoco Users. 
This describes functionality that allows developer to monitor call progress for individual users and also allows 
controlling call. 

Both the call monitoring and call control allows impersonation functionality, so one account can monitor or control 
calls on behalf of other user. 

### Call Monitoring

Design of the Call Monitoring and Call Control API is based on delivering snapshots of current call state rather thn sending updates. 
This allows very simple implementation of call state within application without complex logic of call signalling. 
As soon as any State of the call changes (dial, connection, hold, transfer, ...) call state is updated and delivered to client.

Communication uses either WebSocket or SSE (Server Side Events) to deliver notifications. Events are JSON encoded
messages. In case of WebSocket API, messages are delivered as text frames. 

To monitor calls over WebSocket open Websocket against 

`/call/monitor/ws?a=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c&userName=john.doe@domain.com&call=monitor`

To monitor calls over SSE open SSE connection against 

`/call/monitor/sse?a=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c&userName=john.doe@domain.com&call=monitor`

In both scenarios supply following parameters: 

Name     | Description 
---------|------------
a        | Valid Authentification token
userName | User to monitor. If not supplied will be monitoring user that owns authentication token. Note that only user with API role may impersonate other user
call     | Supplying with monitor value indicates that Spinoco shall sent events related to Call Monitoring. 

Once the connection with server is establised, Spinoco will start to send state of all active calls for supplied user that take a form 
of JSON encoded message. Following is example of such message: 

``` 
{
 "sessionId"                : "caffeeff-f18c-11e4-9a96-000000000000", 
 "outgoing"                 : false,
 "otherPartyName"           : "Jane Doe",
 "otherPartyNumber"         : "+420123456789",
 "otherPartyContactId"      : ["caffeeff-f18c-11e4-9a96-000000000000", "caffeeff-f18c-11e4-9a96-000000000000"],
 "transferredTo"            : "Transferree",
 "transferredFrom"          : "Transferror", 
 "transferredToSession"     : "caffeeff-f18c-11e4-9a96-000000000000",
 "transferredFromSession"   : "caffeeff-f18c-11e4-9a96-000000000000",
 "ringing"                  : 10, 
 "released"                 : false,
 "connected"                : 7,
 "held"                     : 5, 
 "skills"                   : [["SK1", 1],["SK2", 2]],            
 "hashTags"                 : [["contract-id", { "__tpe" : "ValueHashTag", "hashTagId": "caffeeff-f18c-11e4-9a96-000000000000", "value" : { "__tpe" : "StringValue", "string": "ABCD-12345"} }]]
}

```

Individual parameters of message have following meaning: 

Name                | Required  | Type | Description 
--------------------|-----------|------------------|-----------------------
sessionId           | Y | UUID                   | Id of call session
outgoing            | Y | Boolean                  | Indicates if user is receiveing call (false) or dialed the call (true)
otherPartyName      | N | String                   | Indicates name of other (remote party) of this call. Based on `outgoing` value this is either caller or callee. 
otherPartyNumber    | N | String                   | Indicates phone number of other (remote party) of this call. Based on `outgoing` value this is either caller or callee.  
otherPartyContactId | N | [UUID, UUID]         | If other party is contact (not a call within the group) contains id of addressBook and id of contact. 
transferredTo       | N | UUID                   | Name of the party where this call is about to be transferred (transferee). 
transferredFrom     | N | UUID                   | Name of the remote party from where this call is being transferred (transferor).
transferredToSession| N | UUID                     | If present indicates this call was tranferred to given session
transferredFromSession| N | UUID                   | If present indicates this call was transferred from given session        
ringing             | Y | Int                      | Number of seconds this call is ringing
released            | Y | Boolean                  | If true, indicates call has been released. Also that indicates very last message of this call received. 
connected           | N | Int                      | If present, indicates number of seconds since this call was connected.
held                | N | Int                      | If present, indicated number of seconds since the call was held. 
skills              | Y | [[String, Int], ...]     | Indicates skills the call has assigned. Multiple skills may be specified. The second parameter indicates skill color and shape.       
hashTags            | Y | [[String, HashTag]       | Contains hastags assigned to call. Hastags may contain user defined attributes (i.e. contractId, customer type etc.. ) and may provide usefull information for the user. Secodn parameter is type of HashTag, first is label of HashTag.  

### Call Control 

Calls are controlled via submitting HTTP REST requests that require sessionId to be specified to control concrete call session.
However when call is dialed, that requires to specify other details, such as userName, E164 formatted phone number or simillar 
destination. When such dial attempt is registered, then as response server returns Id of such call. 


### Call Property Update

Api may update properties of the connected call. These properties allows to modify certain call attributes 
that may allow application further signalling and statitcs. Currently following call attributes may be modified: 

- Skills of the call 
- HashTag(s) of the call 
- Contact of the call 

## Configuration

Spinoco Provides API to configure certain elements of applications, such as creating the users, modifying theri attributes. 
Unless noted differently, changes are effective immediatelly and user is impacted once the request is succesfull. 



### Skills

Skills are repereseted in Spinono as 1 - 4 letter strings, that can affect how tasks are routed, how call are answered or how activites are counted in statistics. 
Skills may have various properties (such as name, priority etc.) and these can be queried by API.

Example of skill object received is here: 

```
{
  "id": "SK1",
  "label": "Skill 1",
  "colorScheme": 1,
  "priority": "Normal",
  "shape": "triangle"
}
```

Meaning of parameters for the skill : 

Attribute | Required | Type | Description 
----------|------|----------|-------------
id        |  X   | String (1..4) |  Skill identifier
label     |  X   | String | Label of the skill 
colorScheme | X | Int | Color from color Scheme of the skill icon
priority    | X | String | Priority of the skill 
shape       | X | Int | Skill Shape (circle, square, triangle) 


## Tasks

### Introduction

Spinoco has rich Task management system. In fact almost every activity in the system is stored as task, 
be it call, email, missed call, appoitment or manually created task. 

This api allows to create, update and query Spinoco rich Task system. 

Currently supported are following task types in Spinoco : 

### Type of tasks

Type of Task        | Description
--------------------|-------------------------------------------------------------------------------------
CommonTask | Task manually created by user of Spinoco Application
CallSessionTask | Task representing received or dialed call 
MissedCallTask | Task created as a result of missed call from client
EmailTask | Task representing sent or received Email 
EventTask | Task representing event with one or many users invited in future. 
HolidayTask | Task representing time when user in Spinoco is taking off time 
HashTagWorkFlowTask | Task that was created by Spinoco as restult of completing other task with hashtag. 

### Common attributes

There are common attributes to each task that are available with each type of task. These are :

Attribute | Type        | Required | Description
----------|-------------|---|--------------------------------------
id        | Type 1 UUID | X |UUID unique identitifaction of the task. This number is unique in Spinoco and contains timestamp when the task was created. 
label     | String      | X |Label of the Task. String representation of the task         
owner     | Object      | X |Owner of the task. See Owner description later. 
assignee  | Object      | X |Assignee of the task. See Assignee description later. 
assignableTo | Object   |   |To whom this task may be assigned. See task asignment later. 
due       | DateTime    | X |When this task is due
message   | Object      |   |Content of the task body (text)
files     | Array       | X |Any attached files to this task
result    | (Date, Object) |  |When present indicates task was completed by assignee at time completed. 
detail    | Object      |   | Some task types may have further detailed information
linked    | Array       |   | List of tasks, that are linked to this task
subscribed| Array       |   | List of users subscribed to this task 


### Task ownership 

Each Task must have exactly one owner. Owner of the task is the entity, that created task, with some exceptions (read later).  
This can be one of the following options: 

Owner Type | Description
-----------|------------------------------
UserRequestOwner | Task was created by User in Spinoco Application
ContactRequestOwner | Task was created by Contact in Addressbook. Typically found in call and email tasks.  
Anonymous | Task was created by Spinoco System automatically (i.e. workflow rule)

Normally, owner is user/contact that created the task. However in certain situations (i.e. dialed call) owner 
may be also the remote party that call has to be established to. 

### Task assignment

Task may be assigned to one concrete user. Once task is assigned to the user, user is responsible 
for completing the task. If the task is closed, then it is always closed by its `assignee`. 

Task assignement can be in following states: 

State | Description
-----------|---------
UnAssigned | Task is not assigned to any user
Assigned | Task is assigned to user
Offered | Task is assigned to user, but other users may take it and assign it to themselves. 


Furthermore task may have set its `assignableTo` attribute. That, when set allows to specify
who can assign that task. Specification can be one of the three possible rules, or combination of them 


Rule | Description
-------------|---------------
Users  | Task can be assigned to any of the users specified
Skills | Task can be assigned to any users that have skill specified
EitherOf | Allows to specify `or` relation between rules. So one can specify combination of skills and users. 


### Call Tasks

All calls within Spinoco are stored in form of special type of task (CallSessionTask). 

CallSessionTaskType contains one single attribute and that is direction. Direction may be Originating or Terminating. 
Each Direction type contains context (from, to) that can further specify source and destionation (caller and callee) of the call. 

Originating direction indicates that `owner` of the task placed the call. 

Terminating direction indicates, that `assignee` received call from the `owner`. 


Each CallSessionTask is created with Type1 UUID that contains encoded time of the call start of given 
call within Spinoco platform. This time is when the call originally appeared in platform. 

Furthermore when call terminates by either beying answered or for some reason not answered, the 
task is closed with time and date and reason. This is stored in `result` attribute of task as `CallTaskCompleted` type. 

Following time information can be obtained from the CallSessionTask

Property | Computation |Description
---------|-------------|-----------
ringing  | result.ringing - timeOf(id) | Time of the call being in `Ringing` state. For the calls answered by Voice Application (IVR) this is typically few ms
connected | result.terminated - result.answered.R  | Time of call being `Connected` in ms.

FurtherMore `result.answered.L` contains reason for call being not connected (i.e. Busy, NotFound, ...). 


### Call Task Details

Apart from determining Call Tasks basic data, Spinoco allows to query detailed progress of every call, 
including (amnogst others) time call was in the queue, when call was transferred and to whomm or when the 
call has been assigned/unasignedd particullar skill. 

This is achieved via querying Call Detail query for call tasks that returns array of Call Events that are assotiated
with every call. 

Each call is compromised of one or more Legs. Typically call has two legs, one that initiated the 
call (called `i`) and then one or more outoging legs from the call session (indicated like `o<n>` where `n` is assigned
uniquely and continuously. 

The events received from query are of `SessionLegEvent` type and are always assigned to specific leg with following meaning: 

Event Type | Description
-----------|-------------
NewLeg     | Guaranteed to be first event for any given leg
Ringing    | Leg received `Ringing` indication from the remote party. 
Connected  | Leg was connected with remote party. This apears always when media start to flow to/from session. Also this may indicate that leg was put on hold. 
Terminated | Leg was terminated
Transfer   | Leg initiated transfer to other call session. 


Please see explanation of individual event types for the leg to get better understading of the possibilities 
of information that you may query from the details. 



### Recording of call 

Calls may be recoreded. Each call may have one or more recordings. Call may have mutiple recordings 
for example when it is recorded in Voice Application (IVR) and then by Spinoco User, or when call 
was transferred. 

All Call recordings are stored in `detail` attribute of the task, in `recordings` property of the `Recordings` detail. 
Amongs few details of the recording it contains id of the recording, that may be eventually used to download recording itself. 

Recordings are stored in `.ogg` open source audio format as defined in [Ogg Vorbis](https://cs.wikipedia.org/wiki/Vorbis).

## User Management 

Users in system as referenced by a from of either UUID or by userName (email). Available API allows 
to query user, get a list of available users and modify user properties. 

Users may be further assigned to team for team specific functionality. 

Example UserInfo object is here : 

```
{
  "id": "caffee99-f18c-11e4-9a96-000000000000",
  "userName": "john.doe@spinoco.com",
  "firstName": "John",
  "lastName": "Doe",
  "lang": "en_US",
  "deactivated": "1493890946392",
  "roles": [
    "User"
  ],
  "permissions": [
    "Team"
  ],
  "skills": [
    "SK1",
    "SK2"
  ],
  "memberOf": [],
  "avatar": "caffee99-f18c-11e4-9a96-000000000000",
  "customReports": [],
  "recordCalls": false,
  "ringTones": {},
  "calls": {}
}

```

Meaning of attributes of the user detail : 

Attribute | Required | Type | Description 
----------|------|----------|-------------
id        |  X   | UUID |  Id of the user
userName     |  X   | String | Login Name of the user  
firstName | X | String | First Name of the user
lastName    | X | String | Last Name of the user 
lang       |   | String | Language of the user, If not present deafults to US English
deactivated|  | Timestamp | Contains timestamp when user was deactivated. If empty, user is active
roles | X | array, string | Roles the user has assigned
permissions| X | array, string | Permissons of the user 
skills | X | array, string | Skill Ids which user has been assigned
memberOf | X | array, UUID | Id of the team user is member of. Currently only first team is accepted. 
avatar | | UUID | Id of avatar picture user has uploaded. 
customReports | | array, object | Reports that have been assigned to the user 
recordCalls | X | boolean | If true, calls of the user will be recorded 
ringTones | X | object | settings for the ringtones 
calls | X | object | settings of user call management

# Group Authentication 

## Plain Text Authentication [/auth]   
### Acquire SRP6a authentication token [POST]

+ Request (application/json)
        
    + Attributes

        + username: john.doea@domain.com (string, required) - Name of the User 
        + password: secret (string, required)              - User password
    


+ Response 200 (application/json)

    + Body
    
            {
                "token" : "5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c"
            }
    

## SRP6a Authentication Step1   [/auth/1]
### Acquire Salt and 'B' value   [GET]

+ Request (application/json)

    + Attributes

        + userName (string, required)  - Name of the user 
        + A (string, required)         - A Parameter

+ Response 200 (application/json)

    + Body 
    
            {
                "s" : "8c18cbc8af45bcb27c260defaaa65e21001923e054ce347c40d9ef7586c24163",
                "b" : "4dca49c2a848d6234d394bcd9fa3cc06679fe677c721a879a7f54295a1a7b24bfd046eeab8543546ada3099a24be29c848f7e9aa9f3b31900924f15cd86afcabf8ed292ca7c93d78040e211ac07092a9cf07f831ad3809fd9eb0318e2d4751c599ac3ee96baec30b2aa0f56bb45278c02a6fbff6c835e6b9384775ae3b39b2141e1f26f9718de1e599f7442f2a0ba99c3833302cad1d56ae685f66593aca24758a4242bd5595ae3da097e432b623e620ccf9c0b93c2da8cd747c8c05bcd15f334bb23314c3bc7dfd5835e57dd611482a5200c51647c0354da558862140c6922b57c125b8e6428bb1a728aec1694879aa36d59fdaed81516d0c9b9d7e0021"
            }


## SRP6a Authentication Step2 [/auth/2]    
### Acquire SRP6a token [GET]

+ Request (application/json)

    + Attributes

        + M1 (string, required) - M1 Parameter
        + A (string, required) - A Parameter

+ Response 200 (application/json)

    + Body 
    
            {
                "userId" : "caffee99-fb16-11e4-88df-000000000000",
                "ccId" : "caffee99-f18c-11e4-9a96-000000000000",
                "token" : "5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c"
            }
            
            
# Group Address Book

## Create Contact [POST /contact] 

Allows to create contact. Returns Id of the contact Created

+ Request (application/json)

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c

    + Attributes 
    
        + tpe (ContactType, required) - Type of the contact
        + phoneNumbers (array, required) - Contact's Phone number 
          + (ContactPhoneNumber)
        + emails (array, required) - Contact's emails
          + (ContactEmail)
        + address: `Address Of the Contact` (string, optional)  - Optional address
        + parents: `caffee99-fb16-11e4-88df-000000000000` (array, required) - Parents of this contact, Supported for Person type contacts only for now, possibly empty
        + skills: VIP  (array, required) - Skills of the contact, contains ID of the skill, possibly empty 
        + externalId : `some-machine-id` (string, optional) - contains ID for machine synchronization   
        + hashtags  (array, required) - Hashtags assigned to this contact, possibly empty
          + (HashTag)
          
         
    
+ Response 200 (application/json) 

    + Body 
    
                "caffee99-f18c-11e4-9a96-000000000000"
    

## Contact Detail [/contact/{contactId}/{abId}]

+ Parameters
    + contactId : `caffeeff-f18c-11e4-9a96-000000000000` (string) - Id of contact
    + abId : `caffeeff-f18c-11e4-9a96-000000000000` (string) - Id of addressbook. Currently this must be equal to customer Id (ccId)
    

### Get Contact [GET]

Gets details of single contact. Will return `204 No Content` if contact cannot be found. 

+ Request 
    
    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c

+ Response 200 (application/json)
    
    + Attributes
      + id: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the Contact
      + tpe (ContactType, required)
      + externalId : `some-machine-id` (string, optional)  
      + phoneNumbers (array, required) 
        + (ContactPhoneNumber) 
      + emails
        + (ContactEmailGet)
      + address: `Contact Address` (string, optional)  
      + parents: `caffee99-f18c-11e4-9a96-000000000000`  (array, required) 
      + skills : SK1 (array, required)
      + hashTags (array, required)
        + (HashTag)
    
+ Response 404  

    

### Update Contact [POST]

Updates contact. Contact may be updated by several atomic updates contained with single request. 
The reason to update only atomic fields is to minimize conflicts that may occur when multiple 
persons are updating same contact. 

If response is `409 Conflict` that indicates that current values were changed from supplied ones by update request



+ Request (application/json)

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c

    + Attributes 
        + contactId : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the Contact to update
        + updates (array, required) - Updates to apply to contact
            + (ContactUpdate)
    
+ Response 204

+ Response 409
  
  
# Group Call Control 

## Dial new Call [POST /call/dial]

Dials new call to various destination targets. Returns id of new session. 

+ Request (application/json) 

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c

    + Attributes
        + target (DialTarget, required) - Target to dial
        + skills: SK1 (array, required) - Skills the call is marked with
        + hashTags (array, required) - HashTags the call is marked with
            + (HashTag)
        

+ Response 200 

    + Body 
    
            "caffee99-f18c-11e4-9a96-000000000000"

## Answer Call [PUT /call/{sessionId}/answer]

Answers call with specified session. User must have Spinoco application running (desktop, mobile) 
or have available and assigned VoIP Telephone, before this is called.  

+ Parameters
    + sessionId :  `caffee99-f18c-11e4-9a96-000000000000` (string) - Id of session to answer

+ Request 

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c

+ Response 200


## Release Call [PUT /call/{sessionId}/release]

Releases call with specified sessionId 

+ Parameters
    + sessionId :  `caffee99-f18c-11e4-9a96-000000000000` (string) - Id of session to release

+ Request 

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c

+ Response 200

## Hold Call [PUT /call/{sessionId}/hold]

Holds call on specifies sessionId. If call is not yet on hold, this puts call on hold. To cancel hold with call
that is already on hold, use Answer Call. 

+ Parameters
    + sessionId :  `caffee99-f18c-11e4-9a96-000000000000` (string) - Id of session to hold

+ Request 

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c

+ Response 200


## Transfer Call [/call/{sessionId}/transfer]

### Transfer Call to destination [POST]

Transfer call to specified destination. 

+ Parameters
    + sessionId :  `caffee99-f18c-11e4-9a96-000000000000` (string) - Id of session to hold

+ Request  

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c
            
    + Attributes
        + target (DialTarget, required) - Target to dial
        + skills: SK1 (array, required) - Skills the call is marked with
        + hashTags: (array, required) - HashTags the call is marked with
            + (HashTag)

+ Response 200

### Cancel transfer in progress [DELETE]

If the call is currently in transfer to remote destination, but is not yet transferred (remote party did not pickup call yet)
this allows call to be retrieved back, while cancelling the transfer. 

+ Parameters
    + sessionId :  `caffee99-f18c-11e4-9a96-000000000000` (string) - Id of session to hold

+ Request 

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c

+ Response 200


## Join Calls [/call/{sessionId}/join/{otherSessionId}]

### Join Calls [PUT]

Acts like transfer with consultation. Allows to bridge togehter two distinc calls, leaving current user from both calls. 
Both calls must be established before issuing this request 

If the call is currently in transfer to remote destination, but is not yet transferred (remote party did not pickup call yet)
this allows call to be retrieved back, while cancelling the transfer. 

+ Parameters
    + sessionId :  `caffee99-f18c-11e4-9a96-0000000000aa` (string) - Id of session to join
    + otherSessionId :  `caffee99-f18c-11e4-9a96-0000000000bb` (string) - Id of other session to join
    
+ Request 

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c

+ Response 200

# Group Call Property Update

## Update Skills of Call [/call/{sessionId}/skills]

### Update Skills [PUT]

Allows to update Call Skills. This will replace skills of the call by ones supplied. If the call 
is in middle of the call routing, then this may affect the routing and queueing policy.

+ Parameters
    + sessionId :  `caffee99-f18c-11e4-9a96-0000000000aa` (string) - Id of session to update skills 

+ Request 

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c

    + Attributes (array, string) 
        + SK1
        
        

+ Response 200

+ Response 404


## Update Hash Tags of Call [/call/{sessionId}/hashtags]

### Update HashTag [PUT]

Allows to update Hash Tags of the Call. This will replace any hashtags call may have associated with new ones. 
If the call is in middle of the call routing, then this may affect the routing and queueing policy.



+ Parameters
    + sessionId :  `caffee99-f18c-11e4-9a96-0000000000aa` (string) - Id of session to update hash tags  

+ Request 

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c

    + Attributes (array, fixed-type) 
        + (HashTag)
        

+ Response 200

+ Response 404


## Update Contact of Call [/call/{sessionId}/contact/{abId}/{contactId}]

### Update Contact [PUT]

This allows to update the contact of the call for one specified. 



+ Parameters
    + sessionId :  `caffee99-f18c-11e4-9a96-0000000000aa` (string) - Id of session to update skills 
    + abId :  `caffee99-f18c-11e4-9a96-0000000000aa` (string) - Id of new addressbook
    + contactId :  `caffee99-f18c-11e4-9a96-0000000000aa` (string) - Id of new contact

+ Request 

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c
        

+ Response 200

+ Response 404



# Group Call Recording 

## Query Recording [/recording/{taskId}/{recordingId}]

### Download Recording [GET]

Queries Recoding in `audio/ogg` binary data format. If succesfull server streams data of audio recording. 
Note that Spinoco Server also support partial content of the recording to be donwloaded by specifying http [Range header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range).

+ Parameters
    + taskId :  `caffee99-f18c-11e4-9a96-0000000000aa` (string) - Id of task 
    + recordingId :  `caffee99-f18c-11e4-9a96-0000000000aa` (string) - Id of recording 

+ Request 

    + Headers
    
            Authorization: srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c
            Range: 0-   

+ Response 200 (audio/ogg)

+ Response 404


# Group Configuration 

## Query All Available skills [/skill/]

### Get All skills [GET]

Querieas all available active skills in system and their information 

+ Request 

    + Headers
    
            Authorization: srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c
             
+ Response 200 (application/json)

    + Attributes (array[ClientSkillInfo])
   
    

+ Response 404 
            
            

# Group Task Query

## Query of Task detail [/task/{taskId}/detail]

### Query Detail [GET]

Allows to query Concrete existing task 

+ Parameters
    + taskId :  `caffee99-f18c-11e4-9a96-0000000000aa` (string) - Id of task 

+ Request 

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c
        

+ Response 200 (application/json)

    + Attributes
        + id: `caffee99-f18c-11e4-9a96-0000000000aa` (string, required) - Id of the task
        + label: `Task Name` (string, required) - Label (name) of the task
        + owner: (TaskRequestOwner, required) - Owner of the task
        + assignee: (TaskAssignee, required) - Assignee of the task 
        + assignableTo: (AssignableTo, optional) - To whon this task may be assigned. 
        + due: (TaskDue, optional) - When this task is due
        + message: (ClientTextContent, optional) - Any text (body) of the task
        + files: (array[FileContent], required) - Any attached files to the task (does not include files attached to comments)
        + tpe: (TaskType, required) - Type of the task  
        + result: (array, optional) - If defined, task was completed
           + 1493890946392 (string, required) - millis since epoch when this task was closed 
           + (TaskResultType, required)  - result that closed the task 
        + detail: (ClientTaskDetail, optional) - Detail of the task, may be present at some task types   
        + linked: (array, optional) - List of tasks linked to this task
            + `caffee99-f18c-11e4-9a96-0000000000aa`
        + subscribed (array, optional) - List of user subscribed to this task
            + `caffee99-f18c-11e4-9a96-0000000000aa`  
        + hashtags (array[HashTag], required) - List of HashTags the task has assigned
        
        

+ Response 404

## Quey Task Call Sesion Detail [/session/{taskId}]

### Get Detail [GET]

Queries Detailed Call Session log about Call Legs froming Call Session.

+ Parameters
    + taskId :  `caffee99-f18c-11e4-9a96-0000000000aa` (string) - Id of Call Task 

+ Request 

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c


+ Response 200 (application/json)

    + Attributes (array[CallSessionNotify])
    
    
    
    
    
# Group User Management 

## Query User [/user/{userId}/]

### Get User Detail [GET]

Gets user details given user's uuid. 

+ Parameters
    + userId :  `caffee99-f18c-11e4-9a96-0000000000aa` (string) - Id of user 

+ Request 

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c
            
            
+ Response 200 (application/json)

    + Attributes (UserInfo)
        

+ Response 404




## Modify User [/user/]

### Create new User [POST]

Creates new user with user information supplied. Note Id of the user supplied will be ignored and replaced with one 
assigned by server. That userId is in turn returned as body of the `200 OK` response. 

+ Request 

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c


    + Attributes (UserInfo)
    
+ Response 200 (application/json)

    + Attributes (string) - Id of newly created user
    
    
    

### Update current User [PUT]

Updates user specified with JSON. User must exists to be updated. 

+ Request 

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c


    + Attributes (UserInfo)
    
+ Response 200 (application/json)

    + Attributes (string) - Id of newly created user
    
    
 
 

    
# Data Structures

## ContactType (enum)
  + (Anonymous)
  + (Person)
  + (Group)

## Anonymous (object)
  + __tpe : Anonymous (string, fixed)

## Person (object)
  + __tpe : Person (string, fixed)  
  + label : magician (string, required)   - Label of the contact
  + name  : John Doe (string, required)   - Name of the person, First,  Last 
  + gender : Male, Female (enum, optional) - Gender of the person, if known

## Group (object) 
  + __tpe : Person (string, fixed)
  + label : True magicians (string, required)   - Label of the contact
  + name  : Magicians Inc. (string, required)   - Name of the group   
    

## ContactPhoneNumber (array)
  + mobile (string, required) - Tag for the phone number, e.g. mobile, may be empty string
  + +420222500500 (string, required) - Phone Number, E164 Formatted    
  

## ContactEmail (array)
  + private (string) - Tag for the email number, e.g. work, private
  + john.doe@domain.com (string) - Email
  
## ContactEmailGet  
  + label: private (string) - Tag for the email number, e.g. work, private
  + email: john.doe@domain.com (string) - Email  
   
## HashTag (enum)
  + (SimpleHashTag)
  + (ValueHashTag)

## SimpleHashTag 
  + __tpe : SimpleHashTag (string, fixed)
  + hashTagId : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the HashTag

## ValueHashTag
  + __tpe : ValueHashTag (string, fixed)
  + hashTagId : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the HashTag
  + value (HashTagValue, required) - Value of the HashTag
  
## HashTagValue (enum)
  + (HashTagStringValue)
  + (HashTagIntValue)

## HashTagStringValue
  + __tpe : StringValue (string, fixed)
  + string : `some value` (string, required) - Value of the HashTag (string type)

## HashTagIntValue
  + __tpe : IntValue (string, fixed)
  + int : 123456 (number, required) - Value of the HashTag (numeric type)
  
## ClientContactUpdate (object)
  + contactId : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the Contact to update
  + updates (array, required) - Updates to apply to contact
     + (ContactUpdate)
    
## ContactUpdate (enum) 
  + (ContactTypeUpdate)
  + (ContactPhoneNumberUpdate)
  + (ContactEmailUpdate)
  + (ContactAddressUpdate) 
  + (ContactParentUpdate)
  + (ContactSkillUpdate)
  + (ContactExternalIdUpdate)
  + (ContactHashTagUpdate)
  
## ContactTypeUpdate   
  + __tpe : ContactTypeUpdate (string, fixed)
  + current (ContactType, required)
  + update (ContactType, required)
  
## ContactPhoneNumberUpdate
  + __tpe : ContactPhoneNumber (string, fixed)
  + current (ContactPhoneNumber, optional)
  + update (ContactPhoneNumber, optional)
  
## ContactEmailUpdate
  + __tpe : ContactEmail (string, fixed)
  + current (ContactEmail, optional)
  + update (ContactEmail, optional)    
  
  
## ContactAddressUpdate
  + __tpe : ContactAddress (string, fixed)
  + current (string, optional)
  + update (string, optional) 
  
## ContactParentUpdate
  + __tpe : ContactParent (string, fixed)
  + current (array, required)
    + `caffee99-f18c-11e4-9a96-000000000000`
  + update (array, required)
    + `caffee99-f18c-11e4-9a96-0000000000aa`

## ContactSkillUpdate
  + __tpe : ContactSkillUpdate (string, fixed)
  + current (array, required)
    + SK1
  + update (array, required)
    + SK2, SK3, SK1

## ContactExternalIdUpdate  
  + __tpe : ContactExternalIdUpdate (string, fixed)
  + current: `some-machine-id` (string, optional) 
  + update: `other-machine-id` (string, optional) 
  
## ContactHashTagUpdate
  + __tpe : ContactHashTagUpdate (string, fixed)
  + current (HashTag, optional)
  + update (HashTag, optional)
  
## DialTarget (enum)
  + (UserTarget)
  + (ContactTarget)
  + (DeviceTarget)

## UserTarget 
  + __tpe : UserTarget (string, fixed)
  + userId : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the user to dial, must be from the same customer
  
## ContactTarget
  + __tpe : ContactTarget (string, fixed)
  + abId  : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the AddressBook of the Contact to dial 
  + contactId : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the Contact to dial  
  + number: `+1500123456' (string, required) - E164 Formatted number  
    
## DeviceTarget 
  + __tpe : DeviceTarget (string, fixed)
  + userId : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the device to dial, must be from the same customer
  
  
  
## TaskRequestOwner (fixed-type)
  + (UserTaskRequestOwner)
  + (ContactTaskRequestOwner)
  + (AnonymousTaskRequestOwner)
  
## UserTaskRequestOwner (object) 
  + __tpe : UserRequestOwner (string, fixed)
  + userId : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the user that owns the task
  + contact: (array, optional)
    + `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the AddressBook
    + `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the Contact
  
  
## ContactTaskRequestOwner  (object) 
  + __tpe : ContactRequestOwner (string, fixed)   
  + abId: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the AddressBook
  + contactId:  `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the Contact 
  
## AnonymousTaskRequestOwner  (object) 
  + __tpe : Anonymous (string, fixed) 
  
  
  
## TaskAssignee (fixed-type)  
  + (TaskAssigned)
  + (TaskOffered)
  + (TaskUnAssigned)
  
  
## TaskAssigned
  + __tpe : Assigned (string, fixed) 
  + userId : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the user to whom the task is assigned

## TaskOffered
  + __tpe : Offered (string, fixed) 
  + userId : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the user to who has this task assigned and offers is to other users. 

## TaskUnAssigned
 + __tpe : UnAssigned (string, fixed) 
 
 
## AssignableTo (fixed-type)
 + (AssignableToUsers)
 + (AssignableToSkills)
 + (AssignableEitherOf)


## AssignableToUsers (object)
 + __tpe : Users (string, fixed) 
 + users : (array, required) - List of users that this task may be assigned to
     + `caffee99-f18c-11e4-9a96-000000000000`
 
 
## AssignableToSkills (object)
 + __tpe : Skills (string, fixed) 
 + skills : (array, required) - List of skill Ids, that this user may be assigned to 
    + SK1
    + SK2
    

## AssignableEitherOf (object)
 + __tpe : EitherOf (string, fixed) 
 + options: (array, required)
    + (AssignableTo)
    
    
## TaskDue (object)
 + due: 1493890946392 (string, required) - Milliseconds since epoch when this task is due
 + alertBefore : 600 (number, optional) - Number of seconds to alert user before this task is due. 
 
 
## ClientTextContent (object)
 + content: That is task body (string, required) - Body of the task


## FileContent (object)
 + fileName: `foo.txt` (string, required) - Name of the file
 + mimeType: `text/plain` (string, required) - Mime type of the file
 + size:  `100` (number, required) - Size of the file in bytes
 + fileId : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the file in Spinoco
  
  
## TaskType (fixed-type)
 + (HashTagWorkFlowTask)
 + (MissedCallTask)
 + (CallSessionTask)
 
## HashTagWorkFlowTask  (object)   
  + __tpe : HashTagWorkFlowTask (string, fixed) 
  + byHashTag: (HashTag, required)
  + fromTask: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the task from which this task is created


## MissedCallTask (object)
  + __tpe : MissedCallTask (string, fixed)
  + target: (MissedCallTaskType, required)
  + from: (array, required)
    + `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the AddressBook
    + `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the Contact
  + number: `+420222500550` (string, optional) - E164 number if known
  
## MissedCallTaskType (fixed-type)
  + (MissedCallTaskTypeVA)
  + (MissedCallTaskTypeUser)
      

## MissedCallTaskTypeVA  (object)
 + L : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the Spinoco Voice Application

## MissedCallTaskTypeUser (object)
 + R : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the Spinoco Voice Application
  

## CallSessionTask  (object)
  + __tpe : CallSessionTask (string, fixed)
  + direction: (SessionDirection, required)
   
  
## SessionDirection (fixed-type)
  + (OriginatingSessionDirection)
  + (TerminatingSessionDirection)


## OriginatingSessionDirection (object)
  + __tpe : Originating (string, fixed)
  + from: (CustomerCallLegContext, required) - Source of the call 
  + to: (CallLegContext, required) - Destination of the call 
  + fromPhoneNumber: `+420222500550` (string, optional) - If the user has assgined phone number when making outgoing call, this contains that number   


## TerminatingSessionDirection (object)
 + __tpe : Terminating (string, fixed)
 + from: (CallLegContext, required) - Source of the call 
 + to: (CustomerCallLegContext, required) - Destination of the call 
 + toPhoneNumber: `+420222500550` (string, optional) - If dialed with concrete phone number, this contains that phone number  


## CallLegContext (fixed-type)
 + (CustomerCallLegContext)
 + (PublicCallLegContext)

## PublicCallLegContext (object)
  + __tpe: PublicCallLegContext (string, fixed)
  + number: (PublicNumber, optional) - Number of the remote party if known

## CustomerCallLegContext (object)
 + __tpe: CustomerCallLegContext (string, fixed)
 + ccId: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the Spinoco Customer
 + partition: 0  (number, required) - Partition of the customer
 + tpe: (CallLegContextContextType, required) - Type of context
  
  
  
## CallLegContextContextType  (fixed-type)
  + (CallLegContextTypeVoiceApplication)
  + (CallLegContextTypeUser)
  + (CallLegContextTypeDevice)


## CallLegContextTypeVoiceApplication (object)
 + __tpe : VoiceApplication (string, fixed)
 + appId:  `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the Voice Application
 + publicNumber: (PublicNumber, optional) - Number of the voice application 

## CallLegContextTypeUser (object)
 + __tpe : User (string, fixed)
 + userId:  `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the user
 + deviceId:  `caffee99-f18c-11e4-9a96-000000000000` (string, optional) - Id of the device from which the call is made
 + contact: (array, optional) - Id of the contact and addressbook if known 
    + `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the AddressBook
    + `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the Contact
 + mobile: `+420600600600` (string, optional) - E164 number of mobile, id this call was directed to user's mobile number 

## CallLegContextTypeDevice
 + __tpe : Device (string, fixed)
 + userId:  `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the device that was initating / receiving the call


## PublicNumber  (object)
 + e164: `+420222500505` (string, required) - E164 formatted phone number 
 + contactId: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the Contact
 + abId: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the AddresBook

## TaskResultType (fixed-type)
 + (TaskResultTypeCompleted)
 + (TaskResultTypeCallTaskCompleted)
  
## ManualResultType (fixed-type)  
 + (TaskResultTypeCompleted)
  
## TaskResultTypeCompleted  (object)
 + __tpe : Completed (string, fixed)
 + cancelled: false (boolean, required) - Indicates whether owner cancelled the task
 + hashTag: (array, optional) - Any hashtags specified when task was closed
   + (HashTag)
   
## TaskResultTypeCallTaskCompleted (object)
 + ringing: 1493890946392 (string, optional) - millis since epoch when call started to ring
 + answered: (CallSessionReleaseOrAnswer, required) - Whether call was answered or just released CallSessionReleaseCause \/ DateTime
 + terminated: 1493890946392 (string, optional) - millis since epoch when call terminated 
 + byCaller: false (boolean, required) - if caller terminated the call, this is set to true
 + closedManually:  (ManualResultType, optional) - if the call task was also manually closed, then this contains information like hashtags etc.. 
 + missedCall: (MissedCallCandidate, optional) - if the call was missed, this contains data from which missed call task may be created

  
## CallSessionReleaseOrAnswer (fixed-type)
 + (CallSessionRelease)
 + (CallSessionAnswer)

## CallSessionRelease (object)
 + L : (CallSessionReleaseCause, required) - Contains reason why call was not released
 
## CallSessionAnswer (object)
 + R : 1493890946392 (string, required) - contains number of millis since epch when call was answered

## MissedCallCandidate (object)
 + dueAt: (TaskDue, required) - When the missed call has to be due 
 + assignableTo: (AssignableTo, optional) if specified, contains who can handle missed call
 + assignTo: `caffee99-f18c-11e4-9a96-000000000000` (string, optional) - Id of the user to whom this has to be assigned
 + completeWhenConnected: true (boolean, required) when true, indicates that this missed call task has to be completed when user will be connected


## CallSessionReleaseCause (fixed-type)
 + (CallSessionReleaseCauseBusy)
 + (CallSessionReleaseCauseNotFound)
 + (CallSessionReleaseCauseFailure)

## CallSessionReleaseCauseBusy (object)
  + __tpe : Busy (string, fixed)
  
## CallSessionReleaseCauseNotFound (object)
  + __tpe : NotFound (string, fixed)  
  + detail : (string, optional) additional detail why the number was not found
  
## CallSessionReleaseCauseFailure (object)
  + __tpe : NotFound (string, fixed)  
  + rsn : (string, required) SIP reason for call being not connected
  + descr : (string, optional) additional information 


## ClientTaskDetail (fixed-type)
  + (Recordings)


## Recordings (object)  
  + __tpe : Recordings (string, fixed)  
  + recordings : (object, required)
  + `caffee99-f18c-11e4-9a96-000000000000` : (ClientCallRecording, required) - Individual call recordings 


## ClientCallRecording (object)
  + id : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - id of recording
  + from: 1493890946392 (string, required) - when the recording started, millis since epoch
  + duration: 60000 (string, required) - millis of the recording duration
  + vm: false (boolean, required) - true, if the recording is voice-mail recording 
  + available: false (boolean, required) - false, when recording is not yet available, true when recording may be replayed.
  
  
  
## ClientSkillInfo (object)
  + id : `SK1` (string, required) - Id of skill (1...4 letters)
  + label: `Skill 1` (string, required) - Name of the skill
  + colorScheme: 1 (number, required) - Number of the color scheme 
  + priority: Normal (SkillPriority, required) - Priority of the skill 
  + shape: triangle (SkillShape, required) - Shape of the skill icon
  
## SkillShape (enum)
  + circle
  + square
  + triangle
  
  
## SkillPriority (enum)
  + IfNoOthers  - Tasks with this skill are processed only, if no other tasks are in Q. 
  + Lowest
  + Lower
  + Low
  + Less
  + Normal  - Default.
  + More
  + High
  + Higher
  + Highest
  + OnlyThis    -  If tasks of this priority exists, then only these are processed.     

  
  
## UserInfo (object)
  + id: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - id of user
  + userName: `john.doe@spinoco.com` (string, required) - username (email)
  + firstName: `John` (string, required) - First Name  of the user
  + lastName: `Doe` (string, required) - Last Name of the user
  + lang: `en_US` (string, optional) - Language of the user, en_US if not specified.  
  + deactivated :  1493890946392 (string, optional) - If present user is not active since given epoch timestamp 
  + roles: (array, required) - roles of the user 
    + (UserRole)
  + permissions: (array, required) - permissions of the user
    + (UserPermission)
  + skills: (array, required) - skills of the user
    + SK1
    + SK2
  + memberOf: (array, required) - member of the team, currently only one team is accepted 
  + avatar: `caffee99-f18c-11e4-9a96-000000000000` (string, optional) - If present user has avatar stored in given file 
  + customReports: (array, required) - Reports presented only to this user  
  + recordCalls: (boolean, required) - whether to record all calls of this user 
  + ringTones: (object, required) - ringtones of the user  
  + calls: (object, required) - specific setting for managing user call
  
  
## UserRole (enum) 
   + User  - User, this gives access to Spinoco App 
   + TeamLeader - Team leader has rights to manage users and statistics
   + Administrator - Administrator has full rights with optional access to settings tab
   + BillingUser - Has access to Billing as User
   + BillingAdministrator - Has access to administer Billing
   + Api - Account with access to API interface. May impersonate other users. 
   
   
## UserPermission (enum)
   + Team  - grants access to team screen
   + Communication - grants access to communication screen
   + Dashboard - grants access to dashboard
   + Stats - grants access to statistics screen
   + Settings - grants access to settings
   
   
   
## SessionCreated (object)   
  + sessionId: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - id of session (task)
  + direction: (SessionDirection)  
  
  
## SkillsChanged  (object)
  + skills: (array, required) - new skills of the call 
    + SK1
    + SK2
  
## HashTagsChanged (object)
  + hashTags: (array, required) - new hashtags of the call 
    + (HashTag)
  
## UpdateContact (object)
 + abId: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - id of contact addressBook
 + contactId: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of contact
 
## SessionAnswerable (object)
 + answerable: true (boolean, required) - if true, session may be answered by availabe operator. Only for queued calls. 
 
## SessionQueued (object)
 + from: 1493890946392 (string, required) - when the call was put in the queue. 
 
## SessionRecorded (object)
 + recording: (ClientCallRecording, required) - Recording was attached to this call session 
 

## SessionEventType (fixed-type)
  + SkillsChanged
  + HashTagsChanged
  + UpdateContact
  + SessionAnswerable
  + SessionQueued
  + SessionRecorded 
  
## SessionEvent (object)
  + sessionId: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - id of session (task)
  + eventId: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - id of this event (contains time of this event)
  + tpe: SessionEventType
  
  
## CallLegId (object)
  + sessionId: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - id of session (task)
  + tag: `i` (string, required) - id of the leg 


## NewLeg (object)
  + context: (CallLegContext, required) - Context of the leg
  
## Ringing (object)

## Connected (object)
  + held: false (boolean, required) - whether the call is held or not  

## Terminated (object)
  + reason: (CallSessionReleaseCause, optional) - reason for the leg to be released
  + remote: false (boolean, required) - if true, indicates that remote party terminated the leg
  
## Transfer (object)
  + transferTo: (CallLegContext, optional) where this call is being transfered to/from
  
## SessionLegEventType (fixed-type)
  + NewLeg
  + Ringing
  + Connected
  + Terminated
  + Transfer
  
  
## SessionLegEvent (object)
  + eventId: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - id of this event (contains time of this event)
  + legId: (CallLegId, required) - Id of session and leg for which this event was generated
  + tpe: (SessionLegEventType, required) - Event for the leg


## SessionTerminated (object)
  + sessionId: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - id of the session (task)
  + eventId: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - id of this event (contains time of this event)

   
## CallSessionNotify (fixed-type)
   + SessionCreated    
   + SessionEvent
   + SessionLegEvent
   + SessionTerminated