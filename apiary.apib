FORMAT: 1A
HOST: https://dev-01.spinoco.com/

# Spinoco Application Interface

## Authentication

Spinoco authentication is based on SRP6a protocol and allows secure authentication of users to Spinoco.
The basics of authentication are based on acquiring SRP6a authentication token, and then using that token 
for any subsequent requests towards Spinoco. Token has limited lifetime, and when lifetime of token expires, 
the server responds with `401 Precondition failed` response.

There are two available methods for acquiring SRP6a code: 
 
 - Plain text method 
 - SRP6a method
 
### Plain Text Authentication 

For developers that do not have experience with SRP6a authentication or don't want to bother implementing two phase 
authentication protocol, plain text method can be used. This plain text method runs over secured (https://) connection
and allows by sending username and password to obtain fresh SRP6a token, that can be used later for authenticating 
individual requests. 
 

### SRP6a Authentication

SRP6a authentication follows specification described here: [http://srp.stanford.edu/design.html]. 
This method is two phase mechanism, where in first step intermediate values are computed and then 
these values are used to obtain final SRP6a authentication token. 

Detailed javascript implementation on how SRP6a can be used may be found with javascript 
source code here: [https://bitbucket.org/simon_massey/thinbus-srp-js].

Spinoco uses SHA-256 Hash function and following parameteres: 

```javascript
var SRP6CryptoParams= {
    N_base10: "448616383187165606651397957351930126088959498417676897069668099929146593133050791056986041677935700368943974214658691029107468455415273970882109774247135498147915287122728852069975864268235759217199788431041451477092639227095981654351333417492353210595652288720549813844192730489571439345577216025985178039675579730305754734022526822185859548503530557959207512412633499051392938758716075863712443209048239916212231617118226047298314209402496598826021084630927234351872299676843649774085599799977855576878895229392716612630885512894472432885027870635373635240671589195395903474869071154351550631506416922905672517",
    g_base10: "2",
    k_base16: "bd3aecf291f7b79355111ef96b385fb4ecdfb82f8e5eb44a3257c6e4bed67d79"
}

```

### Using SRP6a token 

SRP6a token is passed with Each HTTP Request in `Authorization` Header like in following example: 

```
Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c

```

If client cannot supply Authorization header to request, then it may supply token as parameter to request. 
This is used for example for websocket communitation. Example of such technique is here: 

```
GET /user/wss?a=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c
```


### Impersonation 

Certain API calls allows one account to impersonate for the other. These are calls that require 
special privilegies to be assigned to user that is willing to perfrom requests on behalf of other users. Such requests are 
required to contain further parameter in authentication to indicate user on which behalf API user 
is making the request. 

For requests authenticated by `Authorize` header, user is passed as authentication property like in this example: 


```
Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c,user=marry.doe@domain.com

```

Similarly for authentication passed as query paramater user is passed as user parameter: 

```
GET /user/wss?a=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c&u=marry.doe@domain.com
```

## Address Book

Spinoco organizes contacts in AddressBook. Each AddressBook is identified by its unique Id. Each contact belongs exactly 
to one AddressBook. 

Each Contact is identified by its `contactId`, and may have mulitple attributes. Contacts may be any of three types : 

- Person (physical person)
- Group (may contain none or many persons, i.e. company)
- Anonymous (contact that is neither person nor group)


Three operations are currently supported on AddressBook 

- Create New Contact
- Update Current Contact
- Get Contact

Each of these requests requires user to authenticate. 

Common workflow of Contact Creation is :

1. Create Contact
2. Send any updates to contact

### Update Contact 

Contact Update Api was designed to minimize chances of conflict. 
To update contact you need to know current value of the property (i.e. address) and new value of that property. 

Following table lists messages available to update contact and their behaviour when current or update parameter is specified: 

Attribute   | Message                  | Action      | current | update 
------------|--------------------------|-------------|--------|---------|--------
Type        | ContactTypeUpdate        | succeeds if current value matches `current` attribute | required | required
Phone       | ContactPhoneNumberUpdate | Adds new phone | not present | required
Phone       | ContactPhoneNumberUpdate | Modifies current phone specified by `current` | required | required
Phone       | ContactPhoneNumberUpdate | Removes current phone specified by `current` | required | not present
Email       | ContactEmailUpdate       | Adds new email | not present | required
Email       | ContactEmailUpdate       | Modifies current email specified by `current` | required | required
Email       | ContactEmailUpdate       | Removes current email specified by `current` | required | not present
Address     | ContactAddressUpdate     | succeeds if current value matches `current` attribute | required | required
Parents     | ContactParentUpdate      | succeeds if current value matches `current` attribute | required | required
Skills      | ContactSkillUpdate       | succeeds if current value matches `current` attribute | required | required
Extermal Id | ContactExternalIdUpdate  | succeeds if current value matches `current` attribute | required | required
Hashtag     | ContactHashTagUpdate     | Adds new hashtag | not present | required
Hashtag     | ContactHashTagUpdate     | Removes current hashtag | required | not-present
Hashtag     | ContactHashTagUpdate     | Modifies current hashtag | required| required



# Group Authentication 

## Plain Text Authentication [/auth]   
### Acquire SRP6a authentication token [POST]

+ Request (application/json)
        
    + Attributes

        + username: john.doea@domain.com (string, required) - Name of the User 
        + password: secret (string, required)              - User password
    


+ Response 200 (application/json)

    + Body
    
            {
                "token" : "5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c"
            }
    

## SRP6a Authentication Step1   [/auth/1]
### Acquire Salt and 'B' value   [GET]

+ Request (application/json)

    + Attributes

        + userName (string, required)  - Name of the user 
        + A (string, required)         - A Parameter

+ Response 200 (application/json)

    + Body 
    
            {
                "s" : "8c18cbc8af45bcb27c260defaaa65e21001923e054ce347c40d9ef7586c24163",
                "b" : "4dca49c2a848d6234d394bcd9fa3cc06679fe677c721a879a7f54295a1a7b24bfd046eeab8543546ada3099a24be29c848f7e9aa9f3b31900924f15cd86afcabf8ed292ca7c93d78040e211ac07092a9cf07f831ad3809fd9eb0318e2d4751c599ac3ee96baec30b2aa0f56bb45278c02a6fbff6c835e6b9384775ae3b39b2141e1f26f9718de1e599f7442f2a0ba99c3833302cad1d56ae685f66593aca24758a4242bd5595ae3da097e432b623e620ccf9c0b93c2da8cd747c8c05bcd15f334bb23314c3bc7dfd5835e57dd611482a5200c51647c0354da558862140c6922b57c125b8e6428bb1a728aec1694879aa36d59fdaed81516d0c9b9d7e0021"
            }


## SRP6a Authentication Step2 [/auth/2]    
### Acquire SRP6a token [GET]

+ Request (application/json)

    + Attributes

        + M1 (string, required) - M1 Parameter
        + A (string, required) - A Parameter

+ Response 200 (application/json)

    + Body 
    
            {
                "userId" : "caffee99-fb16-11e4-88df-000000000000",
                "ccId" : "caffee99-f18c-11e4-9a96-000000000000",
                "token" : "5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c"
            }
            
            
# Group Address Book

## Create Contact [POST /contact] 

Allows to create contact. Returns Id of the contact Created

+ Request (application/json)

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c

    + Attributes 
    
        + tpe (ContactType, required) - Type of the contact
        + phoneNumbers (array, required) - Contact's Phone number 
          + (ContactPhoneNumber)
        + emails (array, required) - Contact's emails
          + (ContactEmail)
        + address: `Address Of the Contact` (string, optional)  - Optional address
        + parents (array, required) - Parents of this contact, Supported for Person type contacts only for now, possibly empty
            +  `caffee99-fb16-11e4-88df-000000000000`
        + skills  (array, required) - Skills of the contact, contains ID of the skill, possibly empty
            + VIP
        + externalId : `some-machine-id` (string, optional) - contains ID for machine synchronization   
        + hashtags  (array, required) - Hashtags assigned to this contact, possibly empty
          + (HashTag)
          
         
    
+ Response 200 (application/json) 

    + Body 
    
                "caffee99-f18c-11e4-9a96-000000000000"
    

## Contact Detail [/contact/{contactId}/{abId}]

+ Parameters
    + contactId : `caffeeff-f18c-11e4-9a96-000000000000` (string) - Id of contact
    + abId : `caffeeff-f18c-11e4-9a96-000000000000` (string) - Id of addressbook. Currently this must be equal to customer Id (ccId)
    

### Get Contact [GET]

Gets details of single contact. Will return `404 Not Found` if contact cannot be found. 

+ Request 
    
    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c

+ Response 200 (application/json)
    
    + Attributes
      + id: `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the Contact
      + tpe (ContactType, required)
      + externalId : `some-machine-id` (string, optional)  
      + phoneNumbers (array, required) 
        + ContactPhoneNumber 
      + emails
        + ContactEmailGet
      + address: `Contact Address` (string, optional)  
      + parents (array, required)
        + `caffee99-f18c-11e4-9a96-000000000000` 
      + skills : SK1 (array, required)
      + hashTags (array, required)
        + (HashTag)
    
+ Response 404  

    

### Update Contact [POST]

Updates contact. Contact may be updated by several atomic updates contained with single request. 
The reason to update only atomic fields is to minimize conflicts that may occur when multiple 
persons are updating same contact. 

If response is `409 Conflict` that indicates that current values were changed from supplied ones by update request



+ Request (application/json)

    + Headers
    
            Authorization:srp6a token=5d4625a4e276184855627b20c9189796933faa183b79bd7f710d3685bff8933c

    + Attributes 
        + contactId : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the Contact to update
        + updates (array, required) - Updates to apply to contact
            + (ContactUpdate)
    
+ Response 204

+ Response 409
  
    
# Data Structures

## ContactType (enum)
  + (Anonymous)
  + (Person)
  + (Group)

## Anonymous (object)
  + __tpe : Anonymous (string, fixed)

## Person (object)
  + __tpe : Person (string, fixed)  
  + label : magician (string, required)   - Label of the contact
  + name  : John Doe (string, required)   - Name of the person, First,  Last 
  + gender : Male, Female (enum, optional) - Gender of the person, if known

## Group (object) 
  + __tpe : Person (string, fixed)
  + label : True magicians (string, required)   - Label of the contact
  + name  : Magicians Inc. (string, required)   - Name of the group   
    

## ContactPhoneNumber (array)
  + mobile (string, required) - Tag for the phone number, e.g. mobile, may be empty string
  + +420222500500 (string, required) - Phone Number, E164 Formatted    
  

## ContactEmail (array)
  + private (string) - Tag for the email number, e.g. work, private
  + john.doe@domain.com (string) - Email
  
## ContactEmailGet  
  + label: private (string) - Tag for the email number, e.g. work, private
  + email: john.doe@domain.com (string) - Email  
   
## HashTag (enum)
  + (SimpleHashTag)
  + (ValueHashTag)

## SimpleHashTag 
  + __tpe : SimpleHashTag (string, fixed)
  + hashTagId : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the HashTag

## ValueHashTag
  + __tpe : ValueHashTag (string, fixed)
  + id : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the HashTag
  + value (HashTagValue, required) - Value of the HashTag
  
## HashTagValue (enum)
  + (HashTagStringValue)
  + (HashTagIntValue)

## HashTagStringValue
  + __tpe : StringValue (string, fixed)
  + v : `some value` (string, required) - Value of the HashTag (string type)

## HashTagIntValue
  + __tpe : IntValue (string, fixed)
  + v : 123456 (number, required) - Value of the HashTag (numeric type)
  
## ClientContactUpdate (object)
  + contactId : `caffee99-f18c-11e4-9a96-000000000000` (string, required) - Id of the Contact to update
  + updates (array, required) - Updates to apply to contact
     + (ContactUpdate)
    
## ContactUpdate (enum) 
  + (ContactTypeUpdate)
  + (ContactPhoneNumberUpdate)
  + (ContactEmailUpdate)
  + (ContactAddressUpdate) 
  + (ContactParentUpdate)
  + (ContactSkillUpdate)
  + (ContactExternalIdUpdate)
  + (ContactHashTagUpdate)
  
## ContactTypeUpdate   
  + __tpe : ContactTypeUpdate (string, fixed)
  + current (ContactType, required)
  + update (ContactType, required)
  
## ContactPhoneNumberUpdate
  + __tpe : ContactPhoneNumber (string, fixed)
  + current (ContactPhoneNumber, optional)
  + update (ContactPhoneNumber, optional)
  
## ContactEmailUpdate
  + __tpe : ContactEmail (string, fixed)
  + current (ContactEmail, optional)
  + update (ContactEmail, optional)    
  
  
## ContactAddressUpdate
  + __tpe : ContactAddress (string, fixed)
  + current (string, optional)
  + update (string, optional) 
  
## ContactParentUpdate
  + __tpe : ContactParent (string, fixed)
  + current (array, required)
    + `caffee99-f18c-11e4-9a96-000000000000`
  + update (array, required)
    + `caffee99-f18c-11e4-9a96-0000000000aa`

## ContactSkillUpdate
  + __tpe : ContactSkillUpdate (string, fixed)
  + current (array, required)
    + SK1
  + update (array, required)
    + SK2, SK3, SK1

## ContactExternalIdUpdate  
  + __tpe : ContactExternalIdUpdate (string, fixed)
  + current: `some-machine-id` (string, optional) 
  + update: `other-machine-id` (string, optional) 
  
## ContactHashTagUpdate
  + __tpe : ContactHashTagUpdate (string, fixed)
  + current (HashTag, optional)
  + update (HashTag, optional)